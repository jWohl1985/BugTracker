@model DashboardViewModel

@inject UserManager<BugTrackerUser> userManager
@inject ICompanyInfoService companyInfoService
@inject IProjectService projectService
@inject ITicketService ticketService
@inject IRoleService roleService

@{
	ViewData["Title"] = "Dashboard";
	BugTrackerUser currentUser = await userManager.GetUserAsync(User);
	Company userCompany = await companyInfoService.GetCompanyInfoByIdAsync(currentUser.CompanyId);

	async Task<List<Project>> GetUserProjects()
	{
		IEnumerable<string> roles = await roleService.GetUserRolesAsync(currentUser);
		if (roles.Contains("Admin"))
		{
			return await companyInfoService.GetAllProjectsAsync(userCompany.Id);
		}
		else
		{
			return await projectService.GetUserProjectsAsync(currentUser.Id);
		}
	}

	async Task<List<Ticket>> GetUserTickets()
	{
		IEnumerable<string> roles = await roleService.GetUserRolesAsync(currentUser);
		if (roles.Contains("Admin"))
		{
			return await ticketService.GetAllTicketsByCompanyAsync(userCompany.Id);
		}
		else
		{
			return await ticketService.GetTicketsByUserIdAsync(currentUser.Id, userCompany.Id);
		}
	}
}

<!-- Styles -->
<style>
	.amDark {
		background-color: #30303d;
		color: #fff;
	}

	#chartdiv {
		width: 100%;
		height: 500px;
	}
</style>

<strong>@currentUser.FullName</strong>
<span class="text-muted" style="font-size:x-small;">
	<strong>@Model.Company.Name</strong>
</span>

<div>
	<div classxfont-weighteighteightgetainer-fluid">

		<div class="row mt-2">

			<!-- My Projects -->
			<div class="col-lg-3 col-md-6 col-sm-6">
				<a asp-controller="Projects" asp-action="MyProjects" style="text-decoration:none">
					<div class="card text-center bg-info">
						<div class="body">
							<div class="p-15 text-light">
								<h3>@((await GetUserProjects()).Count())</h3>
								<span>Active Projects</span>
							</div>
						</div>
					</div>
				</a>
			</div>

			<!-- My Tickets -->
			<div class="col-lg-3 col-md-6 col-sm-6">
				<a asp-controller="Tickets" asp-action="AllTickets" style="text-decoration:none">
					<div class="card text-center bg-secondary">
						<div class="body">
							<div class="p-15 text-light">
								<h3>@((await GetUserTickets()).Count())</h3>
								<span>Total Tickets</span>
							</div>
						</div>
					</div>
				</a>
			</div>

			@if (User.IsInRole("Admin") || User.IsInRole("ProjectManager"))
			{
				<!-- Unassigned Tickets -->
				<div class="col-lg-3 col-md-6 col-sm-6">
					<a asp-controller="Tickets" asp-action="UnassignedTickets" style="text-decoration:none">
						<div class="card text-center bg-warning">
						<div class="body">
							<div class="p-15 text-light">
								<h3>@Model.Tickets.Where(t => string.IsNullOrEmpty(t.DeveloperId)).Count()</h3>
								<span>Unassigned Tickets</span>
							</div>
						</div>
						</div>
					</a>
				</div>
			}

		</div>
	</div>

	<hr />

	<div class="mt-5 ">
		<div class="row">

			<!-- Projects List -->
			<div class="col">
				<div class="bg-secondary">
					<div class="card m-1 p-2">
						<div class="card-header">
							<h2>Projects</h2>
						</div>
						<div class="card-body">
							<div class="table-responsive" style="overflow-y:auto;height:600px;">
                                <table class="table table-hover table-striped">
                                    <thead class="">
                                        <tr>
                                            <th>Project</th>
											<th>Due Date</th>
											<th>Priority</th>
											<th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                         @foreach (var project in Model.Projects.OrderByDescending(d => d.StartDate))
                                         {
                                              <tr>
                                                  <td><a asp-controller="Projects" asp-action="Details" asp-route-id="@project.Id" style="color:black"><strong>@project.Name</strong></a></td>
												  <td><span style="font-size:small">@project.EndDate.ToString("MM.dd.yyyy")</span></td>
												  <td><span class="badge bg-dark">@project.Priority.Name</span></td>
                                                  <td><a class="btn btn-sm btn-outline-secondary" 
													  asp-controller="Projects" asp-action="Details" asp-route-id="@project.Id"><i class="fs-5 bi-justify"></i></a>
												  </td>
                                              </tr>
                                         }
                                    </tbody>
                                </table>
                            </div>
						</div>
					</div>
				</div>
			</div>

			<!-- Tickets List -->
			<div class="col">
				<div class="bg-secondary">
					<div class="card m-1 p-2">
						<div class="card-header">
							<h2>Tickets</h2>
						</div>
						<div class="card-body">
							<div class="table-responsive" style="overflow-y:auto;height:600px;">
                                <table class="table table-hover">
                                    <thead class="">
                                        <tr>
                                            <th>Title</th>
                                            <th>Developer</th>
                                            <th>Status</th>
                                            <th>Priority</th>
                                            <th>Date</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                         @foreach (var ticket in Model.Tickets.OrderByDescending(d => d.Created))
                                         {
                                              <tr>
                                                  <td><a asp-action="Details" asp-controller="Tickets" asp-route-id="@ticket.Id" style="color:black"><strong>@ticket.Title</strong></a> </td>
                                                  <td>
                                                      @if (ticket.DeveloperId is not null)
                                                      {
                                                          @ticket.Developer?.FullName
                                                      }
                                                      else
                                                      {
                                                          <span class="badge bg-warning text-dark">Unassigned</span>
                                                      }
                                                  </td>
                                                  @if (ticket.Status.Name == "New")
                                                  {
                                                      <td><span class="badge bg-success rounded-pill">@ticket.Status.Name</span></td>

                                                  }
                                                  else
                                                  {
                                                      <td><span class="badge bg-secondary rounded-pill">@ticket.Status.Name </span></td>
                                                  }
                                                  <td><span class="badge bg-dark">@ticket.Priority.Name</span></td>
                                                  <td>@ticket.Created.ToString("MM-dd-yyyy")</td>
                                                  <td>
                                                      <a class="btn btn-sm btn-outline-secondary" 
													  asp-controller="Tickets" asp-action="Details" asp-route-id="@ticket.Id"><i class="fs-5 bi-justify"></i></a>
                                                  </td>
                                              </tr>
                                         }
                                    </tbody>
                                </table>
                            </div>
						</div>
						<div class="card-footer">
						</div>
					</div>
				</div>
			</div>

			<!-- Members -->
			<div class="col-md-2 ">
				<div class="bg-dark">
					<div class="card m-1 p-2">
						<div class="card-header">
							<h2>Members</h2>
							<hr />
						</div>
						<div class="card-body" style="overflow-y:auto;height:600px;background-color:antiquewhite">
							@foreach(BugTrackerUser user in userCompany.Members)
							{
								<div class="">
									<span class="fw-bold">@user.FullName</span>
									<h6>@((await roleService.GetUserRolesAsync(user)).FirstOrDefault())</h6>
									<hr/>
								</div>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts
{
	<!--Google Charts-->
	<script type="text/javascript" src="https://www.google.com/jsapi"></script>
	<script type="text/javascript">
		google.load("visualization", "1", { packages: ["corechart"] });
		google.setOnLoadCallback(drawChart);
		function drawChart() {
			$.ajax({
				type: "POST",
				url: "/Home/GglProjectPriority",
				data: '{}',
				contentType: "application/json; charset=utf-8",
				dataType: "json",
				success: function (result) {
					var data = google.visualization.arrayToDataTable(result);

					//3D Pie
					var options = {
						title: 'Project Priority',
						is3D: true,
						chartArea: { left: 0,bottom: 15,width: '100%', height: '100%'},
						legend: { position: 'bottom' }

					};

					var chart = new google.visualization.PieChart($("#chart3D")[0]);
					chart.draw(data, options);
				},
				failure: function (rresult) {
					alert(result.d);
				},
				error: function (result) {
					alert(result.d);
				}
			});
		}
	</script>
	<script type="text/javascript">
		google.load("visualization", "1", { packages: ["corechart"] });
		google.setOnLoadCallback(drawChart);
		function drawChart() {
			$.ajax({
				type: "POST",
				url: "/Home/GglProjectTickets",
				data: '{}',
				contentType: "application/json; charset=utf-8",
				dataType: "json",
				success: function (result) {
					var data = google.visualization.arrayToDataTable(result);

					//Donut
					var options = {
						title: 'Company Ticket Distribution',
						pieHole: 0.3,
						chartArea: { left: 0,bottom: 15,width: '100%', height: '100%'},
						legend: { position: 'bottom' }
					};
					var chart = new google.visualization.PieChart($("#donut")[0]);
					chart.draw(data, options);
				},
				failure: function (rresult) {
					alert(result.d);
				},
				error: function (result) {
					alert(result.d);
				}
			});
		}
	</script>

	<!-- Morris Donut Charts -->
	<script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
	<script>

		var morrisDonutData = [{
			label: "Low",
			value: @Model.Tickets.Where(t=>t.Priority.Name == nameof(TickPriority.Low)).Count()
		}, {
			label: "Medium",
			value: @Model.Tickets.Where(t=>t.Priority.Name == nameof(TickPriority.Medium)).Count()
		}, {
			label: "High",
			value: @Model.Tickets.Where(t=>t.Priority.Name == nameof(TickPriority.High)).Count()
		}, {
			label: "Urgent",
			value: @Model.Tickets.Where(t=>t.Priority.Name == nameof(TickPriority.Urgent)).Count()
		}];


		/*
		Morris: Donut
		*/
		if ($('#morrisTicketPriority').get(0)) {
			var donutChart = Morris.Donut({
				resize: true,
				element: 'morrisTicketPriority',
				data: morrisDonutData,
				colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
			});

			donutChart.options.data.forEach(function(label, i) {
				var legendItem = $('<span></span>').text( label['label'] + ": " +label['value']).prepend('<span>&nbsp;</span>');
				legendItem.find('span')
				  .css('backgroundColor', donutChart.options.colors[i])
				  .css('width', '20px')
				  .css('display', 'inline-block')
				  .css('margin', '10px');
				$('#legend').append(legendItem)
			});
	};
	</script>

	<!-- Chart JS Pie/Donut *** -->
	<script src="https://cdn.jsdelivr.net/npm/chart.js@3.6.0/dist/chart.min.js"></script>
	<script>

		var donutChartCanvas = $('#donutChart').get(0).getContext('2d');
		var donutData = {
			labels: [
				'@nameof(TickStatus.Development)',
				'@nameof(TickStatus.New)',
				'@nameof(TickStatus.Resolved)',
				'@nameof(TickStatus.Testing)'
			],
			datasets: [
				{
					data: [
						@Model.Tickets.Where(t=> t.Status.Name == nameof(TickStatus.Development)).Count(),
						@Model.Tickets.Where(t=> t.Status.Name == nameof(TickStatus.New)).Count(),
						@Model.Tickets.Where(t=> t.Status.Name == nameof(TickStatus.Resolved)).Count(),
						@Model.Tickets.Where(t=> t.Status.Name == nameof(TickStatus.Testing)).Count()
					],
					backgroundColor: [
						'rgba(255, 99, 132, 0.2)',
						'rgba(54, 162, 235, 0.2)',
						'rgba(255, 206, 86, 0.2)',
						'rgba(75, 192, 192, 0.2)'
					],
					borderColor: [
						'rgba(255, 99, 132, 1)',
						'rgba(54, 162, 235, 1)',
						'rgba(255, 206, 86, 1)',
						'rgba(75, 192, 192, 1)'
					]
				}
			]
		};

		var donutOptions = {
			maintainAspectRatio: false,
			responsive: true,
		};
		// Create pie or doughnut chart
		// You can switch between pie and doughnut using the method below.
		new Chart(donutChartCanvas, {
			type: 'doughnut',
			data: donutData,
			options: donutOptions
		});
	</script>

	<!-- AM Charts -->
	<!-- Resources -->
	<script src="https://cdn.amcharts.com/lib/4/core.js"></script>
	<script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
	<!-- Chart code -->
	<script>
		$.ajax({
			type: "POST",
			url: "/Home/AmCharts",
			data: '{}',
			contentType: "application/json; charset=utf-8",
			dataType: "json",
			success: function (result) {
				am4core.ready(function() {

					// Themes begin
					// Themes end

					 // Create chart instance
					var chart = am4core.create("chartdiv", am4charts.XYChart);


					// Add data
					chart.data = result;

					// Create axes
					var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
					categoryAxis.dataFields.category = "project";
					categoryAxis.numberFormatter.numberFormat = "#";
					categoryAxis.renderer.inversed = true;
					categoryAxis.renderer.grid.template.location = 0;
					categoryAxis.renderer.cellStartLocation = 0.1;
					categoryAxis.renderer.cellEndLocation = 0.9;

					var  valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
					valueAxis.renderer.opposite = true;

					// Create series
					function createSeries(field, name) {
					  var series = chart.series.push(new am4charts.ColumnSeries());
					  series.dataFields.valueX = field;
					  series.dataFields.categoryY = "project";
					  series.name = name;
					  series.columns.template.tooltipText = "{name}: [bold]{valueX}[/]";
					  series.columns.template.height = am4core.percent(100);
					  series.sequencedInterpolation = true;

					  var valueLabel = series.bullets.push(new am4charts.LabelBullet());
					  valueLabel.label.text = "{valueX}";
					  valueLabel.label.horizontalCenter = "left";
					  valueLabel.label.dx = 10;
					  valueLabel.label.hideOversized = false;
					  valueLabel.label.truncate = false;

					  var categoryLabel = series.bullets.push(new am4charts.LabelBullet());
					  categoryLabel.label.text = "{name}";
					  categoryLabel.label.horizontalCenter = "right";
					  categoryLabel.label.dx = -10;
					  categoryLabel.label.fill = am4core.color("#fff");
					  categoryLabel.label.hideOversized = false;
					  categoryLabel.label.truncate = false;
					}

					createSeries("tickets", "Tickets");
					createSeries("developers", "Devs");

				}); // end am4core.ready()


			},
			failure: function (result) {
				alert(result.d);
			},
			error: function (result) {
				alert(result.d);
			}
		});
	</script>
}